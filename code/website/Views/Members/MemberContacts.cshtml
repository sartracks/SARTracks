@* Copyright 2011 Matt Cosand and others (see AUTHORS.TXT)
 *
 * This file is part of SARTracks.
 *
 *  SARTracks is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  SARTracks is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with SARTracks.  If not, see <http://www.gnu.org/licenses/>.
 *@
@model SarTracks.Website.Models.SarMember
@using SarTracks.Website.Models
@{ bool canEdit = (bool)ViewData["canEdit"]; }
<table id="ContactTable" class="data-table" cellspacing="0" data-bind="triggerUpdate: rows">
<tbody data-bind="template: { name: 'contactTableTmpl', foreach: rows }">
</tbody>
</table>
<script type="text/html" id="contactTableTmpl">
        <tr>
            <td>
                <strong data-bind="text: contactTypes[Type()]"></strong>
            </td>
            <td data-bind="text: SubType">
            </td>
            <td data-bind="text: Value">
            </td>
            @if (canEdit)
            {
                <td>
                    <img class="img-button EditContact" src="@Url.Content("~/Content/images/edit.png")" />
                    <img class="img-button DeleteContact" data-bind="attr: { delid: Id(), delmsg: ((SubType() == null) ? '' : (SubType() + ' ')) + contactTypes[Type()] + ': ' + Value() }" src="@Url.Content("~/Content/images/delete.png")" />
                </td>
            }
        </tr>
</script>
<span class="AddContact ButtonLink">Add Contact Information</span>

<script type="text/javascript">
   var contactTypes = ['@Html.Raw(string.Join("', '", Enum.GetNames(typeof(ContactType))))'];
   var subTypes = { 0: ['Cell', 'Home', 'Work', 'Pager'], 2: ['HAM'] };
   
   var contactsList = null;

   function loadContacts()
   {
       $.ajax({ type: 'POST', url: '@Url.Action("GetContactInfo")', data: { q: '@Model.Id' }, dataType: 'json',
           success: function (data) {
               var t = $('#ContactTable');
               if (contactsList == null) {
                   contactsList = ko.mapping.fromJS({ rows: data });
                   ko.applyBindings(contactsList, t[0]);
               } else {
                   ko.mapping.fromJS({ rows: data }, { 'rows': { 'key': function (data) { return ko.utils.unwrapObservable(data.Id); }}}, contactsList);
               }
               colorTable(t);
           }
       });
   }

   $(document).ready(function () {
       @if (canEdit)
       {
           <text>
           $(".AddContact").click(function () {
               loadManagement('@Url.Action("ContactManagement")', { q: '@Model.Id' }, function () {
                   contactModel = ko.mapping.fromJS({ Id: null, MemberId: '@Model.Id', Type: 0, SubType: 'Cell', Value: null });
                   ko.applyBindings(contactModel, $('#ContactDialog')[0]);
                   $('#ContactDialog').dialog("open");
               });
           });

            wireEditDelete('Contact', '@Url.Action("DeleteContact")', loadContacts);
           </text>
       }
       loadContacts();
       loadManagement('@Url.Action("ContactManagement")', {q: '@Model.Id' }, function () { });
   });
</script>
