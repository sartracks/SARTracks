@* Copyright 2011 Matt Cosand and others (see AUTHORS.TXT)
 *
 * This file is part of SARTracks.
 *
 *  SARTracks is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  SARTracks is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with SARTracks.  If not, see <http://www.gnu.org/licenses/>.
 *@
@model SarTracks.Website.Models.SarMember
@using SarTracks.Website.Models

@{ bool canEdit = (bool)ViewData["canEdit"]; }
<table id="AddressTable" class="data-table" cellspacing="0" data-bind="triggerUpdate: rows">
<tbody data-bind="template: { name: 'addressTableTmpl', foreach: rows }">
</tbody>
</table>

<script type="text/html" id="addressTableTmpl">
  <tr>
    <td><strong data-bind="text: addressTypes[Type()]"></strong></td>
    <td data-bind="text: Address.Street()+', '+Address.City()+', '+Address.State()+' '+Address.Zip()"></td>
    @if (canEdit)
    {
      <td>
        <img class="img-button EditAddress" src="@Url.Content("~/Content/images/edit.png")" />
        <img class="img-button DeleteAddress" data-bind="attr: { delid: Id(), delmsg: Type() }" src="@Url.Content("~/Content/images/delete.png")" />
      </td>
    }
  </tr>     
</script>
<span class="AddAddress ButtonLink">Add Address</span>

<script type="text/javascript">
  var addressTypes = ['@Html.Raw(string.Join("', '", Enum.GetNames(typeof(MemberAddressType))))'];
  var addressList = null;

  function loadAddresses()
  {
    $.ajax({type: 'POST', url: '@Url.Action("GetAddresses")', data: { q: '@Model.Id' }, dataType: 'json', 
           success: function (data) {
               var t = $('#AddressTable');
               if (addressList == null) {
                   addressList = ko.mapping.fromJS({ rows: data });
                   ko.applyBindings(addressList, t[0]);
               } else {
                   ko.mapping.fromJS({ rows: data }, { 'rows': { 'key': function (data) { return ko.utils.unwrapObservable(data.Id); }}}, addressList);
               }
               colorTable(t);
           }
       });
   }

   $(document).ready(function() {
     @if (canEdit)
     {
       <text>
       $(".AddAddress").click(function() {
          loadManagement('@Url.Action("ContactManagement")', {q: '@Model.Id' }, function () {
            addressModel = ko.mapping.fromJS({ Id: null, MemberId: '@Model.Id',Type: 1, Address: {Street: null, City: null, State: null, Zip: null }});
            ko.applyBindings(addressModel, $('#AddressDialog')[0]);
            $('#AddressDialog').dialog("open");
          });
        });

        wireEditDelete('Address', '@Url.Action("DeleteAddress")', loadAddresses);
        </text>
     }
     loadAddresses();
     loadManagement('@Url.Action("ContactManagement")', {q: '@Model.Id' }, function () { });
   });
</script>